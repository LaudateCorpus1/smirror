init:
  fnAppPath: $Pwd(..)
  mirrorAppZip: $Pwd(../aws/smirror.zip)
  mirrorCronZip: $Pwd(../cron/aws/smirrorcron.zip)
  functionName: StorageMirror
  cronFunctionName: StorageMirrorCron
  privilegePolicy1: privilege-policy1.json
  privilegePolicy2: privilege-policy2.json

pipeline:
  package:
    action: exec:run
    target: $target
    checkError: true
    commands:
      - unset GOPATH
      - cd ${fnAppPath}
      - export GO111MODULE=on
      - export GOOS=linux
      - export GOARCH=amd64
      - go mod vendor
      - cd aws
      - go build -o smirror
      - zip -j smirror.zip smirror
      - cd ../cron/aws
      - go build -o smirrorcron
      - zip -j smirrorcron.zip smirrorcron

  deployCloudFunction:
    action: gcp/cloudfunctions:deploy
    credentials: $gcpCredentials
    '@name': $functionName
    entryPoint: StorageMirror
    serviceAccount: ${gcp.serviceAccount}
    runtime: go111
    availableMemoryMB: 256
    eventTrigger:
      eventType: google.storage.object.finalize
      resource: projects/_/buckets/${gsTriggerBucket}
    environmentVariables:
      LOGGING: 'true'
      CONFIG: gs://${gsConifgBucket}/StorageMirror/config.json
    source:
      URL: ${fnAppPath}/
    sleepTimeMs: 5000

  deployLambda:
    action: aws/lambda:deploy
    credentials: $awsCredentials
    functionname: $functionName
    runtime:  go1.x
    handler: smirror
    timeout: 360
    environment:
      variables:
        LOGGING: 'true'
        CONFIG: s3://${s3TriggerBucket}/e2e-mirror/config/mirror.json
    code:
      zipfile: $LoadBinary(${mirrorAppZip})
    rolename: lambda-${functionName}-executor
    define:
      - policyname: kms-${functionName}-role
        policydocument: $Cat('${privilegePolicy1}')
    attach:
      - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  setTrigger:
    action: aws/s3:setupBucketNotification
    sleepTimeMs: 20000
    bucket: ${s3TriggerBucket}
    lambdaFunctionConfigurations:
      - functionName: $functionName
        id: ObjectCreatedEvents
        events:
          - s3:ObjectCreated:*
        filter:
          prefix:
            - data


  deployCronLambad:
    action: aws/lambda:deploy
    credentials: $awsCredentials
    functionname: $cronFunctionName
    runtime:  go1.x
    handler: smirrorcron
    timeout: 360
    environment:
      variables:
        LOGGING: 'true'
        CONFIG: s3://${s3TriggerBucket}/e2e-mirror/config/cron.json
    code:
      zipfile: $LoadBinary(${mirrorCronZip})
    schedule:
      expression: rate(1 minute)
    rolename: ${cronFunctionName}-executor
    define:
      - policyname: ${cronFunctionName}-role
        policydocument: $Cat('${privilegePolicy2}')
    attach:
      - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
