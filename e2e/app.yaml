init:
  fnAppPath: $Pwd(..)
  mirrorAppZip: $Pwd(../aws/smirror.zip)
  mirrorCronZip: $Pwd(../cron/aws/smirrorcron.zip)
  mirrorSqsZip: $Pwd(../aws/sqs/smirrorsqs.zip)
  functionName: StorageMirror
  privilegePolicy: privilege-policy.json
  privilegePolicyCron: privilege-policy-cron.json
  privilegePolicySQS: privilege-policy-sqs.json


pipeline:
  package:
    action: exec:run
    target: $target
    checkError: true
    commands:
      - unset GOPATH
      - cd ${fnAppPath}
      - export GO111MODULE=on
      - export GOOS=linux
      - export GOARCH=amd64
      - go mod vendor
      - cd aws
      - go build smirror.go
      - zip -j smirror.zip smirror
      - cd ../cron/aws
      - go build -o smirrorcron
      - zip -j smirrorcron.zip smirrorcron
      - cd ../../aws/sqs
      - go build -o smirrorsqs
      - zip -j smirrorsqs.zip smirrorsqs

#
#  deployCludFunction:
#    action: gcp/cloudfunctions:deploy
#    credentials: $gcpCredentials
#    '@name': $functionName
#    entryPoint: StorageMirror
#    serviceAccount: ${gcp.serviceAccount}
#    runtime: go111
#    availableMemoryMB: 256
#    eventTrigger:
#      eventType: google.storage.object.finalize
#      resource: projects/_/buckets/${gsTriggerBucket}
#    environmentVariables:
#      LOGGING: 'true'
#      CONFIG: gs://${gsConfigBucket}/StorageMirror/config.json
#    source:
#      URL: ${fnAppPath}/
#    sleepTimeMs: 5000

  deployLambda:
    action: aws/lambda:deploy
    credentials: $awsCredentials
    functionname: $functionName
    runtime:  go1.x
    handler: smirror
    timeout: 360
    environment:
      variables:
        LOGGING: 'true'
        CONFIG: s3://${s3ConfigBucket}/StorageMirror/config.json
    code:
      zipfile: $LoadBinary(${mirrorAppZip})
    rolename: lambda-${functionName}-executor
    define:
      - policyname: kms-${functionName}-role
        policydocument: $Cat('${privilegePolicy}')
    attach:
      - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  setTrigger:
    action: aws/s3:setupBucketNotification
    sleepTimeMs: 20000
    bucket: ${s3TriggerBucket}
    lambdaFunctionConfigurations:
      - functionName: $functionName
        id: ObjectCreatedEvents
        events:
          - s3:ObjectCreated:*
        filter:
          prefix:
            - data


  deployStorageMirrorSqs:
    action: aws/lambda:deploy
    credentials: $awsCredentials
    functionname: ${functionName}SQS
    runtime:  go1.x
    handler: smirrorsqs
    code:
      zipfile: $LoadBinary(${mirrorSqsZip})
    rolename: lambda-${functionName}SQS-executor
    define:
      - policyname: sqs-my-queue-role
        policydocument: $Cat('${privilegePolicySQS}')
    attach:
      - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    triggers:
      - source: ${s3Queue}
        type: sqs
        enabled: true
        batchSize: 2


  deployCronLambad:
    action: aws/lambda:deploy
    credentials: $awsCredentials
    functionname: ${functionName}Cron
    runtime:  go1.x
    handler: smirrorcron
    timeout: 360
    environment:
      variables:
        LOGGING: 'true'
        CONFIG: s3://${s3ConfigBucket}/StorageMirrorCron/config.json
    code:
      zipfile: $LoadBinary(${mirrorCronZip})
    schedule:
      expression: rate(1 minute)
    rolename: ${functionName}Cron-executor
    define:
      - policyname: ${functionName}Cron-role
        policydocument: $Cat('${privilegePolicyCron}')
    attach:
      - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
