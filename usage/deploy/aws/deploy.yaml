init:
  appPath: $Pwd(/tmp/smirror)
  gsTriggerBucket: mys3TriggerBucket
  s3ConfigBucket: mys3ConfigBucket
  s3ExternalBucket: mys3ExternalBucket
  s3OpsBucket: mys3OpsBucket
  codeZip: ${appPath}/aws/smirror.zip
  functionName: StorageMirror
  privilegePolicy: privilege-policy.json
  awsCredentials: aws-e2e

pipeline:
  checkOut:
    action: vc/git:checkout
    Origin:
      URL: https://github.com/viant/smirror.git

  package:
    action: exec:run
    target: $target
    checkError: true
    commands:
      - cd ${appPath}
      - unset GOPATH
      - export GO111MODULE=on
      - go mod vendor
      - export GOOS=linux
      - export GOARCH=amd64
      - cd aws
      - go build -o smirror
      - zip -j smirror.zip smirror

  deploy:
    action: aws/lambda:deploy
    credentials: $awsCredentials
    functionname: $functionName
    runtime:  go1.x
    handler: smirror
    timeout: 360
    environment:
      variables:
        LOGGING: 'true'
        CONFIG: s3://${s3ConfigBucket}/StorageMirror/mirror.json
    code:
      zipfile: $LoadBinary(${codeZip})
    rolename: lambda-${functionName}-executor
    define:
      - policyname: kms-${functionName}-role
        policydocument: $Cat('${privilegePolicy}')
    attach:
      - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  setTrigger:
    action: aws/s3:setupBucketNotification
    sleepTimeMs: 20000
    bucket: ${s3TriggerBucket}
    lambdaFunctionConfigurations:
      - functionName: $functionName
        id: ObjectCreatedEvents
        events:
          - s3:ObjectCreated:*
        filter:
          prefix:
            - data
