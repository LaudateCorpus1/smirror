init:

  '!awsCredentials': $params.authWith
  appPath: /tmp/smirror
  appLocation: ${appPath}/aws/smirror.zip
  functionName: StorageMirror
  privilegePolicy: privilege-policy.json

  configLocation: config/config.json
  configText: $Cat('$configLocation')

  bucketNs: ms-dataflow
  configBucket: ${bucketNs}-config
  triggerBucket: ${bucketNs}-trigger
  opsBucket: ${bucketNs}-operations


pipeline:

  package:
    action: exec:run
    target: $target
    checkError: true
    commands:
      - unset GOPATH
      - cd ${appPath}
      - export GO111MODULE=on
      - export GOOS=linux
      - export GOARCH=amd64
      - go mod vendor
      - cd aws
      - go build smirror.go
      - zip -j smirror.zip smirror


  createBuckets:
    trigger:
      action: storage:create
      isDir: true
      dest:
        credentials: $awsCredentials
        URL: s3://${triggerBucket}/
    ops:
      action: storage:create
      isDir: true
      dest:
        credentials: $awsCredentials
        URL: s3://${opsBucket}/

  uploadConfig:
    action: storage:upload
    init:
      configJSON: $AsJSON($configText)
    sourceKey: configJSON
    expand: true
    dest:
      credentials: $awsCredentials
      URL: s3://${configBucket}/StorageMirror/config.json

  info:
    action: print
    init:
      configJSON: $AsJSON($configText)
    message: $configJSON


  deploy:
    checkOut:
      action: vc/git:checkout
      Origin:
        URL: https://github.com/viant/smirror.git
      Dest:
        URL: ${appPath}

    package:
      action: exec:run
      target: $target
      checkError: true
      commands:
        - cd ${appPath}
        - unset GOPATH
        - export GO111MODULE=on
        - rm -rf vendor
        - go mod vendor
        - cd aws
        - go build smirror.go
        - zip -j smirror.zip smirror

    deployLambda:
      action: aws/lambda:deploy
      credentials: $awsCredentials
      functionname: $functionName
      runtime:  go1.x
      handler: smirror
      timeout: 360
      memorySize: 3072
      environment:
        variables:
          LOGGING: 'true'
          CONFIG: s3://${configBucket}/StorageMirror/config.json
      code:
        zipfile: $LoadBinary(${appLocation})
      rolename: lambda-${functionName}-executor
      define:
        - policyname: lambda-${functionName}-role
          policydocument: $Cat('${privilegePolicy}')
      attach:
        - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  setBucketLambdaNotification:
    action: aws/s3:setupBucketNotification
    sleepTimeMs: 20000
    bucket: ${triggerBucket}
    lambdaFunctionConfigurations:
      - functionName: $functionName
        id: ObjectCreatedEvents
        events:
          - s3:ObjectCreated:*
        filter:
          prefix:
            - data
