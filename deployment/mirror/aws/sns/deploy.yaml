init:

  '!awsCredentials': $params.authWith
  '!gcpCredentials': $params.gcpSecrets
  handler: smirrorsns
  appPath: /tmp/${handler}
  appLocation: ${appPath}/aws/sns/${handler}.zip
  functionName: StorageMirrorSns
  privilegePolicy: privilege-policy.json
  configText: $Cat('config.json')

  gcp: ${secrets.$gcpCredentials}
  gcpProject: $gcp.ProjectID
  prefix: $Replace($gcpProject,'_','-')
  snsTriggerBucket: ${prefix}-sns-trigger
  triggerBucket: ${prefix}-trigger
  destBucket: ${prefix}-trigger
  configBucket: ${prefix}-config
  topic: ${prefix}-storagemirrir-topic
  lambdaConfig: s3://${configBucket}/StorageMirror/sns_proxy.json

pipeline:

  set_sdk:
    action: sdk.set
    target: $target
    sdk: go:1.15


  info:
    action: print
    message: "creating topic: $topic"

  uploadConfig:
    action: storage:upload
    init:
      configJSON: $AsJSON($configText)
    sourceKey: configJSON
    expand: true
    dest:
      credentials: $awsCredentials
      URL: $lambdaConfig



  setup:
    action: msg:setupResource
    credentials: $awsCredentials
    resources:
      - URL: $topic
        type: topic
        vendor: aws

  deploy:
    checkOut:
      action: vc/git:checkout
      Origin:
        URL: https://github.com/viant/smirror.git
      Dest:
        URL: ${appPath}

    package:
      action: exec:run
      target: $target
      checkError: true
      commands:
        - cd ${appPath}
        - unset GOPATH
        - export GO111MODULE=on
        - export GOOS=linux
        - export GOARCH=amd64
        - go mod vendor
        - cd aws/sns
        - go build -o ${handler}
        - zip -j ${handler}.zip ${handler}

    deployLambda:
      action: aws/lambda:deploy
      credentials: $awsCredentials
      functionname: $functionName
      runtime:  go1.x
      handler: ${handler}
      timeout: 360
      environment:
        variables:
          CONFIG: $lambdaConfig
      code:
        zipfile: $LoadBinary(${appLocation})
      rolename: lambda-${functionName}-executor
      define:
        - policyname: lambda-${functionName}-role
          policydocument: $Cat('${privilegePolicy}')
      attach:
        - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  setupSubscription:
    action: aws/sns:setupSubscription
    protocol: lambda
    endpoint: $functionName
    topic: $topic

  setupSnsBucket:
    action: storage:create
    isDir: true
    dest:
      credentials: $awsCredentials
      URL: s3://${snsTriggerBucket}/

  setBucketTopicNotification:
    action: aws/s3:setupBucketNotification
    credentials: $awsCredentials
    bucket: ${snsTriggerBucket}
    topicConfigurations:
      - topic: $topic
        id: ObjectCreatedEvents
        events:
          - s3:ObjectCreated:*
