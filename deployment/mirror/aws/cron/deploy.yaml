init:

  '!awsCredentials': $params.authWith
  '!gcpCredentials': $params.gcpSecrets
  handler: smirrorcron
  appPath: /tmp/${handler}
  appLocation: ${appPath}/cron/aws/${handler}.zip
  functionName: StorageMirrorCron
  privilegePolicy: privilege-policy.json

  gcp: ${secrets.$gcpCredentials}
  gcpProject: $gcp.ProjectID
  prefix: $Replace($gcpProject,'_','-')

  destBucket: ${prefix}-trigger
  opsBucket: ${prefix}-operation
  configBucket: ${prefix}-config
  triggerBucket: ${prefix}-trigger

pipeline:

  info:
    action: print
    message: "creating topic: $topic"

  deployConfig:
    action: storage:copy
    source:
      URL: config.json
    expand: true
    dest:
      credentials: $awsCredentials
      URL: s3://${configBucket}/StorageMirrorCron/config.json


  deploy:
    checkOut:
      action: vc/git:checkout
      Origin:
        URL: https://github.com/viant/smirror.git
      Dest:
        URL: ${appPath}

    package:
      action: exec:run
      target: $target
      checkError: true
      commands:
        - cd ${appPath}
        - unset GOPATH
        - export GO111MODULE=on
        - export GOOS=linux
        - export GOARCH=amd64
        - go mod vendor
        - cd cron/aws
        - go build -o ${handler}
        - zip -j ${handler}.zip ${handler}

    upload:
      action: aws/lambda:deploy
      credentials: $awsCredentials
      functionname: ${functionName}
      runtime:  go1.x
      handler: $handler
      timeout: 360
      environment:
        variables:
          LOGGING: 'true'
          CONFIG: s3://${configBucket}/StorageMirrorCron/config.json
      code:
        zipfile: $LoadBinary(${appLocation})
#      schedule:
#        expression: rate(1 minute)
      rolename: ${functionName}-executor
      define:
        - policyname: ${functionName}-role
          policydocument: $Cat('${privilegePolicy}')
      attach:
        - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
